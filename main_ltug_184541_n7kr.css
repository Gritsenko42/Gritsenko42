86,5,96,1,93,34,66,80,18,50,38,38,80,29,69,16,21,8,16,47,67,99,27,30,13,85,74,87,92,57,80,99,29 - orange
const randomNumber = getRandomNumber();
2 - 92

const getRandomSubset = (array, size) => array.slice(0, size);
grape / 71,88,6,0,81,56,92,48,28,33,88,87,66,19,98,1,32,60,76,42,37,4,89,92,61,5,87,86,67,7,24,81,34,17,68,47
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

const multiply = (a, b) => a * b;
false / false

const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
class MyClass { constructor() { this.property = getRandomString(); } }
const getUniqueValues = array => [...new Set(array)];
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
console.log(getRandomString());
apple


const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
3,18,45,68,89,63,13,83,53,56,40,34,62,49,10,30,80,18,44,73,86,64,42,15,11,30,21,13,22,97,61,83,77,44,69,89,8,22,12,59,28,59,2,87,17,57,56,6,79,92,72,94,58,41,53,60,79,16,17,68,26,71,83,16,73,87,98 / banana
const capitalizeString = str => str.toUpperCase();

